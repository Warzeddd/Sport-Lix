generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}
 
// app models

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  plan          Plan      @default(FREE)
  stripeCustomerId String?

  accounts      Account[]
  sessions      Session[]
  programs      Program[]
  dashboards    Dashboard[]
 
  @@map("users")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Plan {
  FREE
  PREMIUM
}

model Morphology {
  id   String @id @default(uuid())
  name String

  movements Movement[]
}

model MuscleGroup {
  id   String @id @default(uuid())
  name String

  muscles   Muscle[]
  movements Movement[]
}

model Muscle {
  id       String @id @default(uuid())
  name     String
  groupId  String
  portion  String?

  group    MuscleGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  movements Movement[]
}

model Movement {
  id             String @id @default(uuid())
  name           String
  image          String?
  description    String?
  morphologyId   String
  groupId        String
  muscleId       String

  morphology     Morphology   @relation(fields: [morphologyId], references: [id], onDelete: Cascade)
  group          MuscleGroup  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  muscle         Muscle       @relation(fields: [muscleId], references: [id], onDelete: Cascade)
  series         Series[]
}

model Program {
  id          String @id @default(uuid())
  slug        String @unique
  userId      String
  name        String
  image       String?
  description String?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  weeks       Week[]
  dashboards    Dashboard[]
}

model Week {
  id         String   @id @default(uuid())
  name       String
  order      String
  programId  String

  program    Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  workouts   Workout[]
}

model Workout {
  id       String   @id @default(uuid())
  name     String
  order    String
  weekId   String

  week     Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
  exercises Exercise[]
  cycles   Cycle[]
}

model Exercise {
  id       String   @id @default(uuid())
  name     String
  order    String
  workoutId String

  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  series   Series[]
}

model Series {
  id           String     @id @default(uuid())
  movementId   String
  order        String
  seriesCount  String
  exerciseId   String

  movement     Movement   @relation(fields: [movementId], references: [id], onDelete: Cascade)
  exercise     Exercise   @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  repetitions  Repetition[]
}

model Repetition {
  id           String     @id @default(uuid())
  repetition   String
  tempo        String?
  description  String?
  rir          String?
  recoveryTime String?
  seriesId     String

  series       Series     @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  felt          Felt[]
}

model Cycle {
  id          String    @id @default(uuid())
  name        String
  startDate   DateTime
  endDate     DateTime?
  workouts    Workout[]
}



model Felt {
  id            String    @id @default(uuid())
  repetitionId  String
  rpe           String?
  comment       String?
  weight        String
  recoveryTime  String?

  repetition    Repetition @relation(fields: [repetitionId], references: [id], onDelete: Cascade)
  dashboards    Dashboard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dashboard {
  id        String  @id @default(uuid())
  slug      String @unique
  userId    String
  programId String
  feltId    String

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  felt      Felt    @relation(fields: [feltId], references: [id], onDelete: Cascade)
}
